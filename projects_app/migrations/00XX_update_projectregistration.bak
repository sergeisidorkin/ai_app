from django.db import migrations, models
import django.db.models.deletion
from django.core.validators import MinValueValidator, MaxValueValidator

def forwards(apps, schema_editor):
    ProjectRegistration = apps.get_model("projects_app", "ProjectRegistration")
    Product = apps.get_model("policy_app", "Product")

    # 1) Перенос number -> number_new (строка -> целое, 3333..9999)
    for row in ProjectRegistration.objects.all():
        val = getattr(row, "number_old", None) if hasattr(row, "number_old") else getattr(row, "number", None)
        num = None
        if isinstance(val, int):
            num = val
        elif isinstance(val, str):
            s = "".join(ch for ch in val if ch.isdigit())
            if s.isdigit():
                n = int(s)
                if 3333 <= n <= 9999:
                    num = n
        # пишем в number_new (может остаться NULL — потом вручную почистишь/исправишь)
        setattr(row, "number_new", num)
        row.save(update_fields=["number_new"])

    # 2) Перенос type (строка краткого имени) -> type_fk
    for row in ProjectRegistration.objects.all():
        old = getattr(row, "type_old", None) if hasattr(row, "type_old") else getattr(row, "type", None)
        pid = None
        if isinstance(old, str) and old.strip():
            prod = Product.objects.filter(short_name=old.strip()).only("id").first()
            if prod:
                pid = prod.id
        setattr(row, "type_fk_id", pid)
        row.save(update_fields=["type_fk"])

def backwards(apps, schema_editor):
    # Обратный перенос (если откатывать) — пишем строковые значения обратно
    ProjectRegistration = apps.get_model("projects_app", "ProjectRegistration")
    for row in ProjectRegistration.objects.select_related("type_fk").all():
        # number_old <- number_new
        setattr(row, "number_old", row.number_new)
        # type_old <- type_fk.short_name
        setattr(row, "type_old", row.type_fk.short_name if row.type_fk_id else "")
        row.save(update_fields=["number_old", "type_old"])

class Migration(migrations.Migration):

    dependencies = [
        ("policy_app", "0001_initial"),  # поправь под свой номер
        ("projects_app", "000X_previous"),  # последний номер твоих миграций
    ]

    operations = [
        # --- Добавляем временные поля для переноса ---
        migrations.AddField(
            model_name="projectregistration",
            name="group",
            field=models.CharField(
                max_length=2, choices=[("RU","RU"),("KZ","KZ"),("AM","AM")],
                default="RU", db_index=True, verbose_name="Группа"
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="projectregistration",
            name="type_fk",
            field=models.ForeignKey(
                to="policy_app.product",
                on_delete=django.db.models.deletion.PROTECT,
                null=True, blank=True,
                related_name="project_registrations",
                verbose_name="Тип",
            ),
        ),
        migrations.AddField(
            model_name="projectregistration",
            name="number_new",
            field=models.PositiveIntegerField(
                null=True, blank=True, verbose_name="Номер",
                validators=[MinValueValidator(3333), MaxValueValidator(9999)],
            ),
        ),

        # --- Перенос данных ---
        migrations.RunPython(forwards, backwards),

        # --- Чистим старые и переименовываем ---
        migrations.RemoveField(
            model_name="projectregistration",
            name="deadline_format",
        ),
        migrations.RemoveField(
            model_name="projectregistration",
            name="type",
        ),
        migrations.RenameField(
            model_name="projectregistration",
            old_name="type_fk",
            new_name="type",
        ),
        migrations.RemoveField(
            model_name="projectregistration",
            name="number",
        ),
        migrations.RenameField(
            model_name="projectregistration",
            old_name="number_new",
            new_name="number",
        ),
        # year -> PositiveInteger (необязательно, но аккуратнее)
        migrations.AlterField(
            model_name="projectregistration",
            name="year",
            field=models.PositiveIntegerField(null=True, blank=True, verbose_name="Год"),
        ),
        # status -> choices + default
        migrations.AlterField(
            model_name="projectregistration",
            name="status",
            field=models.CharField(
                max_length=20,
                choices=[("Не начат","Не начат"),("В работе","В работе"),("На проверке","На проверке"),("Завершён","Завершён"),("Отложен","Отложен")],
                default="Не начат",
                verbose_name="Статус",
            ),
        ),
    ]