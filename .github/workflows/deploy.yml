name: Deploy

on:
  # Запускаем деплой ТОЛЬКО когда CI завершился (на любой ветке/теге).
  workflow_run:
    workflows: ["CI"]
    types: [completed]

  # Ручной запуск
  workflow_dispatch:
    inputs:
      ref:
        description: 'Ref (branch, tag, or SHA) to deploy (optional for manual runs)'
        required: false
        default: 'main'

concurrency:
  # отдельная очередь на каждый SHA (для workflow_run) или ref (для ручного)
  group: deploy-${{ github.event.workflow_run.head_sha || github.event.inputs.ref || 'manual' }}
  cancel-in-progress: true

jobs:
  deploy:
    # Разрешаем:
    #  - workflow_run: только если CI завершился success
    #  - workflow_dispatch: всегда
    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')

    runs-on: ubuntu-latest

    env:
      # Что деплоим:
      #  - при workflow_run: ровно тот commit, который прошёл CI (head_sha)
      #  - при ручном запуске: ref из inputs (или main)
      DEPLOY_REF: ${{ github.event.workflow_run.head_sha || github.event.inputs.ref || 'main' }}

    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          command_timeout: 15m
          envs: DEPLOY_REF
          script: |
            set -euo pipefail

            APP_DIR="$HOME/ai_appdir"
            REPO_DIR="$APP_DIR/ai_app"
            VENV_DIR="$APP_DIR/ai_appenv"
            VENV_ACT="$VENV_DIR/bin/activate"
            ENV_PATH_FILE="$APP_DIR/env/prod.env"
            REPO_SSH="git@github.com:sergeisidorkin/ai_app.git"

            echo "== Preflight =="
            mkdir -p "$APP_DIR" "$APP_DIR/env" "$APP_DIR/run"

            if [ ! -d "$REPO_DIR/.git" ]; then
              echo "Cloning repo..."
              git clone "$REPO_SSH" "$REPO_DIR"
            fi

            if [ ! -d "$VENV_DIR" ]; then
              echo "Creating venv..."
              python3 -m venv "$VENV_DIR"
            fi

            test -f "$ENV_PATH_FILE" || { echo "prod.env not found: $ENV_PATH_FILE" >&2; exit 1; }

            echo "== Sync repo =="
            cd "$REPO_DIR"
            if ! git remote -v | grep -q "$REPO_SSH"; then
              git remote set-url origin "$REPO_SSH"
            fi

            git fetch --all --prune --tags

            REF="${DEPLOY_REF:-main}"
            echo "DEPLOY_REF=${REF}"

            git reset --hard
            git clean -fd

            # 1) Если это валидный commit SHA — чекаутим его (гарантирует совпадение с тем, что прошёл CI)
            if git cat-file -e "$REF^{commit}" 2>/dev/null; then
              git checkout -f "$REF"
              TARGET_DESC="sha:$REF"
            # 2) Иначе тег
            elif git rev-parse -q --verify "refs/tags/$REF" >/dev/null; then
              git checkout -f "tags/$REF"
              TARGET_DESC="tag:$REF"
            # 3) Иначе ветка (origin/<ref>)
            elif git rev-parse -q --verify "origin/$REF" >/dev/null; then
              git checkout -f -B "$REF" "origin/$REF"
              TARGET_DESC="origin/$REF"
            else
              # 4) Последний шанс — main
              git checkout -f -B main origin/main
              TARGET_DESC="origin/main (fallback)"
            fi

            echo "Deploying commit: $(git rev-parse --short HEAD) ($TARGET_DESC)"

            echo "== Python deps =="
            . "$VENV_ACT"
            python -m pip install --upgrade pip wheel
            pip install --no-cache-dir -r requirements.txt

            echo "== Export env from $ENV_PATH_FILE =="
            set -a
            . "$ENV_PATH_FILE"
            set +a

            export DJANGO_SETTINGS_MODULE=settings
            export DJANGO_ENV=${DJANGO_ENV:-prod}
            export READ_DOTENV=${READ_DOTENV:-False}
            export PYTHONPATH="$REPO_DIR:${PYTHONPATH:-}"

            echo "== Django checks & migrations =="
            python -m django check --deploy
            python -m django migrate --noinput
            python -m django collectstatic --noinput

            echo "== Restart gunicorn =="
            sudo systemctl restart ai_app

            echo "== Healthcheck (gunicorn socket) =="
            ok=0
            for i in {1..40}; do
              if curl -sS --fail \
                --unix-socket "$APP_DIR/run/gunicorn.sock" \
                -H "Host: imcmontanai.ru" \
                -H "X-Forwarded-Proto: https" \
                http://unix/health/ >/dev/null; then
                ok=1; break
              fi
              sleep 0.5
            done

            if [ "$ok" -ne 1 ]; then
              echo "Gunicorn health failed — showing logs:"
              systemctl status --no-pager ai_app || true
              journalctl -u ai_app -n 200 --no-pager || true
              exit 1
            fi

            echo "== External HTTPS check =="
            curl --fail -I https://imcmontanai.ru/health/ | grep -q "200 OK"
            echo "Deploy OK"